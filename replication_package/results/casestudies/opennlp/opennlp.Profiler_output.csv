"Project","MethodIndex","Method","Count","Tests"
"opennlp","1","opennlp.tools.ml.maxent.GISModel.eval(int[],double[],EvalParameters)","2332","opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","2","opennlp.tools.ml.perceptron.PerceptronTrainer.findParameters(int,boolean)","434","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","3","opennlp.tools.ngram.NGramModel.add(StringList)","75","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","4","opennlp.tools.ml.model.TwoPassDataIndexer.index(int,ObjectStream<Event>,Map<String,Integer>)","67","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","5","opennlp.tools.ml.model.TwoPassDataIndexer.computeEventCounts(ObjectStream<Event>,Writer,Map<String,Integer>,int)","47","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesModelReadWriteTest.testTextModelPersistence [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","6","opennlp.tools.ml.maxent.GISTrainer.nextIteration(double,CompletionService<ModelExpactationComputeTask>)","44","opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNames [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.maxent.ScaleDoesntMatterTest.testScaleResults [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","7","opennlp.tools.util.Span.spansToStrings(Span[],CharSequence)","41","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.namefind.NameSampleDataStreamTest.testHtmlNameSampleParsing [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testBuildNGramDictionary [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools]"
"opennlp","8","opennlp.tools.ml.maxent.GISModel.eval(int[],float[],double[],EvalParameters)","39","opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","9","opennlp.tools.ml.model.Event.toString()","37","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","10","opennlp.tools.ml.maxent.GISTrainer.trainModel(int,DataIndexer,Prior,int,int)","31","opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDefaultFactory [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","11","opennlp.tools.ml.model.FileEventStream.read()","28","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizerSimpleModel [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","12","opennlp.tools.ml.model.FileEventStream.toLine(Event)","24","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","13","opennlp.tools.ml.model.AbstractDataIndexer.update(String[],Set<String>,Map<String,Integer>,int)","19","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testTokenProbMinScore [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","14","opennlp.tools.ml.model.AbstractDataIndexer.sortAndMerge(List<ComparableEvent>,boolean)","17","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","15","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.trainingStats(EvalParameters)","13","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools]"
"opennlp","16","opennlp.tools.ngram.NGramModel.setCount(StringList,int)","12","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","17","opennlp.tools.ml.model.AbstractDataIndexer.toIndexedStringArray(Map<String,Integer>)","12","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData2Threads [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","18","opennlp.tools.ml.model.ComparableEvent.compareTo(ComparableEvent)","10","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.NegLogLikelihoodTest.testValueAtInitialPoint [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","19","opennlp.tools.tokenize.WhitespaceTokenizer.tokenizePos(String)","9","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.tokenize.TokSpanEventStreamTest.testEventOutcomes [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools],opennlp.tools.namefind.NameSampleDataStreamTest.testWithoutNameTypes [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools]"
"opennlp","20","opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int,Object[],String[])","9","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSTaggerMETest.testPOSTagger [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools]"
"opennlp","21","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.gradientAt(double[])","8","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testSerdeModel [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools]"
"opennlp","22","opennlp.tools.ml.perceptron.PerceptronModel.eval(int[],float[],double[],EvalParameters,boolean)","7","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","23","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.minimize(Function)","7","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","24","opennlp.tools.ml.BeamSearch.bestSequences(int,T[],Object[],double,BeamSearchContextGenerator<T>,SequenceValidator<T>)","7","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.chunker.ChunkerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","25","opennlp.tools.ml.maxent.quasinewton.NegLogLikelihood.valueAt(double[])","7","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools]"
"opennlp","26","opennlp.tools.ml.model.HashSumEventStream.read()","7","opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools]"
"opennlp","27","opennlp.tools.ml.model.UniformPrior.logPrior(double[],int[],float[])","7","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools]"
"opennlp","28","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computeDirection(double[])","7","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","29","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.computePseudoGrad(double[],double[],double[])","6","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","30","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(int[],float[],double[],EvalParameters,boolean)","5","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesCorrectnessTest.testNaiveBayes2 [opennlp-tools]"
"opennlp","31","opennlp.tools.util.AbstractObjectStream.read()","5","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","32","opennlp.tools.ngram.NGramModel.add(StringList,int,int)","5","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools],opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.languagemodel.NgramLanguageModelTest.testRandomVocabularyAndSentence [opennlp-tools]"
"opennlp","33","opennlp.tools.ml.naivebayes.LogProbabilities.Double>normalize()","5","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools]"
"opennlp","34","opennlp.tools.namefind.NameFinderEventStream.generateEvents(String[],String[],NameContextGenerator)","5","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","35","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.findParameters()","4","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools]"
"opennlp","36","opennlp.tools.parser.PosSampleStream.read()","4","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","37","opennlp.tools.ml.perceptron.PerceptronTrainer.trainingStats(EvalParameters)","4","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools]"
"opennlp","38","opennlp.tools.ml.maxent.quasinewton.ArrayMath.logSumOfExps(double[])","4","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","39","opennlp.tools.tokenize.TokenSample.parse(String,String)","4","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools]"
"opennlp","40","opennlp.tools.ml.maxent.GISModel.eval(String[],float[],double[])","4","opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParams [opennlp-tools]"
"opennlp","41","opennlp.tools.postag.POSSample.getSentence()","4","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools]"
"opennlp","42","opennlp.tools.ml.maxent.quasinewton.ArrayMath.maxIdx(double[])","4","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testInTinyDevSet [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNTrainerTest.testTrainModelReturnsAQNModel [opennlp-tools]"
"opennlp","43","opennlp.tools.ml.maxent.quasinewton.LineSearch.doConstrainedLineSearch(Function,double[],LineSearchResult,double,double)","4","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools]"
"opennlp","44","opennlp.tools.ml.maxent.quasinewton.ArrayMath.innerProduct(double[],double[])","4","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","45","opennlp.tools.formats.ad.ADNameSampleStream.processLeaf(Leaf,List<String>,List<Span>)","3","opennlp.tools.formats.ad.ADNameSampleStreamTest.testSmallSentence [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSimpleCount [opennlp-tools],opennlp.tools.formats.ad.ADNameSampleStreamTest.testNames [opennlp-tools]"
"opennlp","46","opennlp.tools.ml.maxent.quasinewton.QNTrainer.trainModel(int,DataIndexer)","3","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","47","opennlp.tools.util.featuregen.FastTokenClassFeatureGenerator.tokenFeature(String)","3","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","48","opennlp.tools.util.StringList.toString()","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","49","opennlp.tools.parser.chunking.BuildContextGenerator.getContext(Parse[],int)","3","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","50","opennlp.tools.util.StringUtil.isWhitespace(char)","3","opennlp.tools.namefind.NameSampleDataStreamTest.testWithNameTypes [opennlp-tools],opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","51","opennlp.tools.parser.AbstractBottomUpParser.buildDictionary(ObjectStream<Parse>,HeadRules,TrainingParameters)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","52","opennlp.tools.dictionary.Dictionary.put(StringList)","3","opennlp.tools.dictionary.DictionaryTest.testHashCode [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest.testLookup [opennlp-tools]"
"opennlp","53","opennlp.tools.tokenize.DefaultTokenContextGenerator.getContext(String,int)","3","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools]"
"opennlp","54","opennlp.tools.tokenize.DefaultTokenContextGenerator.addCharPreds(String,char,List<String>)","3","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","55","opennlp.tools.util.featuregen.WindowFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","56","opennlp.tools.ml.naivebayes.NaiveBayesModel.eval(String[])","3","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","57","opennlp.tools.util.AbstractEventStream.read()","3","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationMaxent [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","58","opennlp.tools.parser.Parse.getType(String)","3","opennlp.tools.parser.ParseSampleStreamTest.testReadTestStream [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.parser.ParseTest.testShow [opennlp-tools]"
"opennlp","59","opennlp.tools.ml.maxent.quasinewton.ArrayMath.l1norm(double[])","3","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","60","opennlp.tools.parser.Parse.getTagNodes()","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","61","opennlp.tools.tokenize.TokSpanEventStream.createEvents(TokenSample)","3","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","62","opennlp.tools.ml.perceptron.PerceptronTrainer.maxIndex(double[])","3","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithTolerance [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools]"
"opennlp","63","opennlp.tools.util.featuregen.BigramNameFeatureGenerator.createFeatures(List<String>,String[],int,String[])","3","opennlp.tools.namefind.NameFinderEventStreamTest.testOutcomesForSingleTypeSentence [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","64","opennlp.tools.ml.model.Event.getContext()","3","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","65","opennlp.tools.util.featuregen.AggregatedFeatureGenerator.updateAdaptiveData(String[],String[])","3","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","66","opennlp.tools.parser.Parse.insert(Parse)","3","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","67","opennlp.tools.tokenize.TokenizerME.train(ObjectStream<TokenSample>,TokenizerFactory,TrainingParameters)","2","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","68","opennlp.tools.ml.TrainerFactory.getEventTrainer(Map<String,String>,Map<String,String>)","2","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","69","opennlp.tools.ml.model.MutableContext.setParameter(int,double)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools]"
"opennlp","70","opennlp.tools.doccat.DocumentSample.getText()","2","opennlp.tools.doccat.DoccatFactoryTest.testDefault [opennlp-tools]"
"opennlp","71","opennlp.tools.ml.perceptron.PerceptronModel.eval(String[],float[],double[])","2","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithSkippedAveraging [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools]"
"opennlp","72","opennlp.tools.ml.model.AbstractModel.init(String[],String[])","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools]"
"opennlp","73","opennlp.tools.util.Span.getStart()","2","opennlp.tools.parser.ParseTest.testToString [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools]"
"opennlp","74","opennlp.tools.tokenize.DefaultTokenContextGenerator.createContext(String,int)","2","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools]"
"opennlp","75","opennlp.tools.parser.ChunkSampleStream.read()","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","76","opennlp.tools.ml.model.HashSumEventStream.calculateHashSum()","2","opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefaultEOS [opennlp-tools]"
"opennlp","77","opennlp.tools.ml.maxent.io.BinaryGISModelWriter.writeDouble(double)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.tokenize.TokenizerFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","78","opennlp.tools.parser.ChunkContextGenerator.getContext(int,String[],String[],String[])","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","79","opennlp.tools.ml.maxent.io.BinaryGISModelWriter.writeUTF(String)","2","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithDefaultFactory [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","80","opennlp.tools.ml.model.ComparablePredicate.compareTo(ComparablePredicate)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","81","opennlp.tools.chunker.DefaultChunkerSequenceValidator.validOutcome(String,String)","2","opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools],opennlp.tools.chunker.ChunkerMETest.testChunkAsSpan [opennlp-tools]"
"opennlp","82","opennlp.tools.postag.POSTaggerME.train(String,ObjectStream<POSSample>,TrainingParameters,POSTaggerFactory)","2","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","83","opennlp.tools.ml.perceptron.PerceptronTrainer.displayIteration(int)","2","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools],opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachDataWithStepSizeDecrease [opennlp-tools]"
"opennlp","84","opennlp.tools.namefind.NameFinderSequenceValidator.validSequence(int,String[],String[],String)","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","85","opennlp.tools.ml.maxent.quasinewton.QNModel.eval(int[],float[],double[],int,int,double[])","2","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","86","opennlp.tools.parser.lang.en.HeadRules.getHead(Parse[],String)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","87","opennlp.tools.ml.model.AbstractModelReader.getParameters(int[][])","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","88","opennlp.tools.ml.model.EvalParameters.getNumOutcomes()","2","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools],opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","89","opennlp.tools.ml.maxent.io.GISModelWriter.persist()","2","opennlp.tools.tokenize.TokenizerFactoryTest.testNullDict [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","90","opennlp.tools.util.featuregen.TokenClassFeatureGenerator.createFeatures(List<String>,String[],int,String[])","2","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","91","opennlp.tools.ml.maxent.quasinewton.ArrayMath.l2norm(double[])","2","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","92","opennlp.tools.parser.AbstractContextGenerator.cons2(List<String>,Cons,Cons,Collection<Parse>,boolean)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","93","opennlp.tools.ml.maxent.GISTrainer.display(String)","2","opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachData [opennlp-tools]"
"opennlp","94","opennlp.tools.namefind.TokenNameFinderFactory.createFeatureGenerators()","2","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools],opennlp.tools.namefind.NameFinderMETest.testOnlyWithEntitiesWithTypes [opennlp-tools]"
"opennlp","95","opennlp.tools.ml.AbstractEventTrainer.getDataIndexer(ObjectStream<Event>)","2","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithParamsDefault [opennlp-tools],opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","96","opennlp.tools.ml.maxent.GISModel.eval(String[],double[])","2","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","97","opennlp.tools.formats.ad.ADNameSampleStream.read()","2","opennlp.tools.formats.ad.ADNameSampleStreamTest.testSmallSentence [opennlp-tools],opennlp.tools.formats.ad.ADTokenSampleStreamTest.testSentences [opennlp-tools]"
"opennlp","98","opennlp.tools.ml.maxent.GIS.trainModel(int,DataIndexer,boolean,boolean,Prior,int,int)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.morfologik.tagdict.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-morfologik-addon]"
"opennlp","99","opennlp.tools.tokenize.TokenSample.addToken(StringBuilder,List<Span>,String,boolean)","2","opennlp.tools.tokenize.TokenizerFactoryTest.testCustomPatternAndAlphaOpt [opennlp-tools],opennlp.tools.tokenize.TokenizerMETest.testTokenizer [opennlp-tools]"
"opennlp","100","opennlp.tools.parser.Parse.getChildren()","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","101","opennlp.tools.parser.Parse.parseParse(String,GapLabeler)","2","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools],opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","102","opennlp.tools.ml.naivebayes.NaiveBayesModel.initOutcomeTotals(String[],Context[])","2","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools],opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools]"
"opennlp","103","opennlp.tools.util.StringUtil.toLowerCase(CharSequence)","2","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools],opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","104","opennlp.tools.parser.AbstractContextGenerator.cons3(List<String>,Cons,Cons,Cons,Collection<Parse>,Collection<Parse>,boolean,boolean,boolean)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","105","opennlp.tools.ml.perceptron.PerceptronModelWriter.sortValues()","1","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","106","opennlp.tools.postag.DefaultPOSContextGenerator.getContext(int,String[],String[],Object[])","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","107","opennlp.tools.namefind.BioCodec.encode(Span[],int)","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","108","opennlp.tools.parser.Parse.addPreviousPunctuation(Parse)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","109","opennlp.tools.util.featuregen.GeneratorFactory.createGenerator(Element,FeatureGeneratorResourceProvider)","1","opennlp.tools.util.featuregen.GeneratorFactoryTest.testCreationWithTokenClassFeatureGenerator [opennlp-tools]"
"opennlp","110","opennlp.tools.parser.ChunkContextGenerator.chunkandpostagbo(int,String,String)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","111","opennlp.tools.ml.model.AbstractModelReader.getOutcomePatterns()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","112","opennlp.tools.formats.ad.ADChunkSampleStream.isIncludePunctuations()","1","opennlp.tools.formats.ad.ADChunkSampleStreamTest.testSimpleCount [opennlp-tools]"
"opennlp","113","opennlp.tools.ngram.NGramModel.getCount(StringList)","1","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","114","opennlp.tools.ml.model.MutableContext.updateParameter(int,double)","1","opennlp.tools.ml.perceptron.PerceptronPrepAttachTest.testPerceptronOnPrepAttachData [opennlp-tools]"
"opennlp","115","opennlp.tools.formats.frenchtreebank.ConstitParseSampleStream.read()","1","opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamTest.testTokensAreCorrect [opennlp-tools]"
"opennlp","116","opennlp.tools.languagemodel.NGramLanguageModel.predictNextTokens(StringList)","1","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools]"
"opennlp","117","opennlp.tools.ml.model.Context.getOutcomes()","1","opennlp.tools.ml.maxent.MaxentPrepAttachTest.testMaxentOnPrepAttachDataWithParamsDefault [opennlp-tools]"
"opennlp","118","opennlp.tools.namefind.NameSample.getSentence()","1","opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","119","opennlp.tools.util.Version.parse(String)","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","120","opennlp.tools.sentdetect.SDEventStream.createEvents(SentenceSample)","1","opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools]"
"opennlp","121","opennlp.tools.namefind.NameSampleDataStream.read()","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools]"
"opennlp","122","opennlp.tools.ml.model.EvalParameters.getConstantInverse()","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","123","opennlp.tools.parser.treeinsert.ParserEventStream.Integer>getNonAdjoinedParent(Parse)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","124","opennlp.tools.namefind.NameFinderME.setProbs(Span[])","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","125","opennlp.tools.ml.maxent.quasinewton.QNModel.eval(String[],double[])","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","126","opennlp.tools.ngram.NGramUtils.getNMinusOneTokenFirst(StringList)","1","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","127","opennlp.tools.postag.DefaultPOSContextGenerator.getSuffixes(String)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","128","opennlp.tools.ml.model.Event.getOutcome()","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","129","opennlp.tools.util.StringList.hashCode()","1","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","130","opennlp.tools.formats.ad.ADSentenceSampleStream.read()","1","opennlp.tools.formats.ad.ADSentenceSampleStreamTest.testSimpleCount [opennlp-tools]"
"opennlp","131","opennlp.tools.postag.POSSampleEventStream.generateEvents(String[],String[],Object[],POSContextGenerator)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","132","opennlp.tools.languagemodel.NGramLanguageModel.calculateProbability(StringList)","1","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools]"
"opennlp","133","opennlp.tools.parser.AbstractBottomUpParser.lastChild(Parse,Parse,Set<String>)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","134","opennlp.tools.ml.maxent.quasinewton.QNMinimizer.isConverged(LineSearchResult)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","135","opennlp.tools.util.featuregen.StringPattern.digits()","1","opennlp.tools.namefind.NameFinderMETest.testOnlyWithNamesWithTypes [opennlp-tools]"
"opennlp","136","opennlp.tools.ml.model.AbstractModel.getOutcome(int)","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools]"
"opennlp","137","opennlp.tools.parser.treeinsert.AttachContextGenerator.getContext(Parse[],int,List<Parse>,int)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","138","opennlp.tools.ml.maxent.quasinewton.QNModel.getPredIndex(String)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachData [opennlp-tools]"
"opennlp","139","opennlp.tools.util.Version.toString()","1","opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools]"
"opennlp","140","opennlp.tools.util.Span.getEnd()","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","141","opennlp.tools.ml.maxent.io.GISModelWriter.compressOutcomes(ComparablePredicate[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","142","opennlp.tools.ml.maxent.quasinewton.ArrayMath.toDoubleArray(List<Double>)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL1Params [opennlp-tools]"
"opennlp","143","opennlp.tools.sentdetect.DefaultSDContextGenerator.getContext(CharSequence,int)","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDefault [opennlp-tools]"
"opennlp","144","opennlp.tools.util.StringList.size()","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","145","opennlp.tools.parser.Parse.adjoin(Parse,HeadRules)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","146","opennlp.tools.lemmatizer.LemmaSample.getTags()","1","opennlp.tools.lemmatizer.LemmatizerEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","147","opennlp.tools.ml.maxent.io.GISModelWriter.sortValues()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","148","opennlp.tools.parser.treeinsert.ParserEventStream.addParseEvents(List<Event>,Parse[])","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","149","opennlp.tools.ml.maxent.quasinewton.ArrayMath.toIntArray(List<Integer>)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithElasticNetParams [opennlp-tools]"
"opennlp","150","opennlp.tools.parser.chunking.CheckContextGenerator.getContext(Parse[],String,int,int)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","151","opennlp.tools.parser.lang.en.HeadRules.readHeadRules(BufferedReader)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","152","opennlp.tools.cmdline.ArgumentParser.validateArgumentsLoudly(String[],Class<T>...)","1","opennlp.tools.cmdline.ArgumentParserTest.testSimpleArgumentsMissingEncoding [opennlp-tools]"
"opennlp","153","opennlp.tools.ml.naivebayes.LogProbabilities.addIn(T,double,int)","1","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","154","opennlp.tools.ml.model.EvalParameters.getParams()","1","opennlp.tools.postag.POSModelTest.testPOSModelSerializationPerceptron [opennlp-tools]"
"opennlp","155","opennlp.tools.util.featuregen.CachedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","156","opennlp.tools.parser.AbstractBottomUpParser.collapsePunctuation(Parse[],Set<String>)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","157","opennlp.tools.parser.treeinsert.BuildContextGenerator.getContext(Parse[],int)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","158","opennlp.tools.parser.chunking.ParserEventStream.addParseEvents(List<Event>,Parse[])","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","159","opennlp.tools.util.Span.getType()","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","160","opennlp.tools.formats.Conll02NameSampleStream.read()","1","opennlp.tools.formats.Conll02NameSampleStreamTest.testReset [opennlp-tools]"
"opennlp","161","opennlp.tools.chunker.ChunkerEventStream.createEvents(ChunkSample)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","162","opennlp.tools.ngram.NGramModel.contains(StringList)","1","opennlp.tools.languagemodel.LanguageModelEvaluationTest.testPerplexityComparison [opennlp-tools]"
"opennlp","163","opennlp.tools.util.featuregen.AggregatedFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinder [opennlp-tools]"
"opennlp","164","opennlp.tools.chunker.DefaultChunkerContextGenerator.getContext(int,String[],String[],String[])","1","opennlp.tools.chunker.ChunkerMETest.testChunkAsArray [opennlp-tools]"
"opennlp","165","opennlp.tools.util.StringList.equals(Object)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","166","opennlp.tools.ngram.NGramGenerator.generate(List<String>,int,String)","1","opennlp.tools.languagemodel.NgramLanguageModelTest.testTrigramLanguageModelCreationFromText [opennlp-tools]"
"opennlp","167","opennlp.tools.dictionary.serializer.DictionarySerializer.create(InputStream,EntryInserter)","1","opennlp.tools.dictionary.DictionaryTest.testSerialization [opennlp-tools]"
"opennlp","168","opennlp.tools.dictionary.Dictionary.contains(StringList)","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","169","opennlp.tools.ml.model.AbstractModelReader.readUTF()","1","opennlp.tools.tokenize.TokenizerFactoryTest.testDefault [opennlp-tools]"
"opennlp","170","opennlp.tools.namefind.DictionaryNameFinder.find(String[])","1","opennlp.tools.namefind.DictionaryNameFinderEvaluatorTest.testEvaluator [opennlp-tools]"
"opennlp","171","opennlp.tools.parser.Parse.hashCode()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","172","opennlp.tools.ml.AbstractEventTrainer.train(ObjectStream<Event>)","1","opennlp.tools.doccat.DocumentCategorizerMETest.testSimpleTraining [opennlp-tools]"
"opennlp","173","opennlp.tools.doccat.NGramFeatureGenerator.extractFeatures(String[],Map<String,Object>)","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","174","opennlp.tools.sentdetect.SentenceDetectorFactory.String>createManifestEntries()","1","opennlp.tools.sentdetect.SentenceDetectorMETest.testSentenceDetector [opennlp-tools]"
"opennlp","175","opennlp.tools.namefind.DefaultNameContextGenerator.getContext(int,String[],String[],Object[])","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithTypes [opennlp-tools]"
"opennlp","176","opennlp.tools.util.featuregen.StringPattern.recognize(String)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","177","opennlp.tools.ml.naivebayes.LogProbabilities.get(T)","1","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachData [opennlp-tools]"
"opennlp","178","opennlp.tools.util.Span.getCoveredText(CharSequence)","1","opennlp.tools.postag.POSSampleTest.testParseEmtpyToken [opennlp-tools]"
"opennlp","179","opennlp.tools.ml.maxent.quasinewton.ParallelNegLogLikelihood.computeInParallel(double[],Class<?extendsComputeTask>)","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataInParallel [opennlp-tools]"
"opennlp","180","opennlp.tools.parser.treeinsert.CheckContextGenerator.getContext(Parse,Parse[],int,boolean)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","181","opennlp.tools.doccat.BagOfWordsFeatureGenerator.extractFeatures(String[],Map<String,Object>)","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","182","opennlp.tools.parser.treeinsert.Parser.train(String,ObjectStream<Parse>,HeadRules,TrainingParameters)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","183","opennlp.tools.parser.Parse.updateHeads(HeadRules)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","184","opennlp.tools.parser.AbstractParserEventStream.getInitialChunks(Parse,List<Parse>)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","185","opennlp.tools.ml.model.GenericModelWriter.init(AbstractModel,DataOutputStream)","1","opennlp.tools.tokenize.TokenizerModelTest.testSentenceModel [opennlp-tools]"
"opennlp","186","opennlp.tools.util.model.ModelUtil.writeModel(MaxentModel,OutputStream)","1","opennlp.tools.doccat.DoccatFactoryTest.testCustom [opennlp-tools]"
"opennlp","187","opennlp.tools.util.featuregen.FeatureGeneratorUtil.tokenFeature(String)","1","opennlp.tools.namefind.NameFinderMETest.testNameFinderWithMultipleTypes [opennlp-tools]"
"opennlp","188","opennlp.tools.parser.Parse.pruneParse(Parse)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","189","opennlp.tools.ml.model.UniformPrior.setLabels(String[],String[])","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testNullDict [opennlp-tools]"
"opennlp","190","opennlp.tools.ml.model.Context.getParameters()","1","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtilWithCutoff5 [opennlp-tools]"
"opennlp","191","opennlp.tools.parser.ChunkContextGenerator.chunkandpostag(int,String,String,String)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","192","opennlp.tools.postag.DefaultPOSContextGenerator.getPrefixes(String)","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","193","opennlp.tools.cmdline.ArgumentParser.createUsage(Class<T>)","1","opennlp.tools.cmdline.ArgumentParserTest.testSimpleArgumentsUsage [opennlp-tools]"
"opennlp","194","opennlp.tools.lemmatizer.LemmatizerME.train(String,ObjectStream<LemmaSample>,TrainingParameters,LemmatizerFactory)","1","opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","195","opennlp.tools.ngram.NGramModel.toDictionary(boolean)","1","opennlp.tools.postag.POSTaggerFactoryTest.testPOSTaggerWithCustomFactory [opennlp-tools]"
"opennlp","196","opennlp.tools.sentdetect.DefaultEndOfSentenceScanner.getPositions(char[])","1","opennlp.tools.sentdetect.SentenceDetectorFactoryTest.testDummyFactory [opennlp-tools]"
"opennlp","197","opennlp.tools.lemmatizer.DefaultLemmatizerContextGenerator.getContext(int,String[],String[],String[])","1","opennlp.tools.lemmatizer.LemmatizerMETest.testLemmasAsArray [opennlp-tools]"
"opennlp","198","opennlp.tools.namefind.NameSample.parse(String,String,boolean)","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNullResources [opennlp-tools]"
"opennlp","199","opennlp.tools.util.featuregen.OutcomePriorFeatureGenerator.createFeatures(List<String>,String[],int,String[])","1","opennlp.tools.namefind.TokenNameFinderCrossValidatorTest.testWithNameEvaluationErrorListener [opennlp-tools]"
"opennlp","200","opennlp.tools.ml.maxent.quasinewton.QNModel.eval(String[],float[],double[])","1","opennlp.tools.ml.maxent.quasinewton.QNPrepAttachTest.testQNOnPrepAttachDataWithL2Params [opennlp-tools]"
"opennlp","201","opennlp.tools.parser.Parse.getProb()","1","opennlp.tools.parser.treeinsert.ParserTest.testTreeInsertParserTraining [opennlp-tools]"
"opennlp","202","opennlp.tools.ml.naivebayes.NaiveBayesTrainer.maxIndex(double[])","1","opennlp.tools.ml.naivebayes.NaiveBayesPrepAttachTest.testNaiveBayesOnPrepAttachDataUsingTrainUtil [opennlp-tools]"
"opennlp","203","opennlp.tools.parser.Parse.getType()","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
"opennlp","204","opennlp.tools.parser.chunking.ParserEventStream.init()","1","opennlp.tools.parser.chunking.ParserTest.testChunkingParserTraining [opennlp-tools]"
